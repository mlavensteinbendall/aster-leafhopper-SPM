import numpy as np
from scipy.integrate import odeint      # Integrate a system of ordinary differential equations
from scipy.integrate import solve_ivp   # solve an initial value problem for a system of ODEs
import random
from scipy.optimize import minimize     # Allows min (or max) objective functions

import matplotlib.pyplot as plt
from   scipy import integrate
# import ipywidgets as ipw
import math
# import tweepy as tw   #twitter 

from datetime import datetime, timedelta

# Define the logistic growth function
def logistic(t, y, par):
    dydt = par[0] * y * (1 - y / par[1])
    return dydt

# Create synthetic data to do parameter estimation
t0 = 0     # intial time
tf = 30    # final time
y0 = 10    # inital solution
y0_reshaped = np.array(y0).reshape(1,)  # solution array  
true_par = [0.5, 200]   # true parameters
ts = np.linspace(t0, tf, 101)

orig_y = solve_ivp(logistic, [t0,tf], [y0], t_eval=ts,args=(true_par,))   # 
y = orig_y.y.T


# Define the proportional error for synthetic data generation
sigma = 0.1  # Set the proportional error to 10% of the true value
# Generate synthetic data with proportional error
# Each data point in 'y' is scaled by (1 + a random error term from a normal distribution scaled by sigma)
prop_data = y * np.array([(1 + sigma * np.random.randn(y.shape[0]))]).T

# Generate synthetic data with constant error
# Each data point in 'y' has a constant noise term added, sampled from a normal distribution with a standard deviation of 20
const_data = y + np.array([20 * np.random.randn(y.shape[0])]).T


# Choose data set
data = const_data # OLS assumes constant error and GLS assumes proportional error

# set initial parameter guess
init_guess = np.array([0.2, 100])

# Define OLS error estimation function
def ols_error_estimate(par):
    # Solve the IVp with current parameters
    orig_sol = solve_ivp(logistic, [t0, tf], [y0], t_eval=ts, args=(par,))
    sol = orig_sol.y.T  # Transpose to match MATLAB output format
    
    # Calculate residuals with proportional scaling
    resids = data - sol
    print(resids)
    
    # Return the sum of squared residuals (OLS cost)
    return np.sum(resids**2)

# Find parameters using OLS
# ops = {'maxiter':25000,'disp':False}
# ols_optpar = minimize(ols_error_estimate, init_guess, options=ops).x
ols_optpar = minimize(ols_error_estimate, init_guess).x


# Define GLS error estimation function
def gls_error_estimate(par):
    # Solve the IVP with current parameters
    orig_sol = solve_ivp(logistic, [t0,tf], [y0], t_eval=ts, args=(par,))
    sol = orig_sol.y.T

    # Calculate residuals with proportional scaling
    resids = (prop_data - sol) / (sol**gammas)
    
    weighted_resids = resids * weights
    
    return np.sum(weighted_resids**2)


# GLS Formulation with proportional error data
gammas = 1
weights = np.ones(prop_data.shape)
gls_optpar = init_guess
old_gls_optpar = init_guess
tol = 1e-4
maxits = 2000
minits = 10
partol = 0.1
parchange = 100
oldparchange = 100
ii = 1

while (ii < maxits and parchange > partol and oldparchange > partol) or (ii < minits):

    ops = {'maxiter':2500,'disp':False}
    gls_optpar = minimize(gls_error_estimate, gls_optpar, options=ops).x
    w = solve_ivp(logistic, [t0,tf], [y0], t_eval=ts,args=(gls_optpar,))
    weights = w.y.T
    weights[weights < tol] = 0
    weights[weights > tol] = weights[weights > tol]**(-2 * gammas)
    inds = old_gls_optpar > 1e-10
    parchange = 1 / 2 * np.sum(np.abs(gls_optpar[inds] - old_gls_optpar[inds]) / old_gls_optpar[inds])
    ii = ii + 1
    old_gls_optpar = gls_optpar

    # Print the parameters
print('OLS Estimation')
print(ols_optpar)
print('GLS Estimation')
print(gls_optpar)

# Residual Examination
os = solve_ivp(logistic, [t0,tf], [y0], t_eval=ts, args=(ols_optpar,))
ols_sol = os.y.T
ols_resids = data - ols_sol

gs = solve_ivp(logistic, [t0,tf], [y0], t_eval=ts, args=(gls_optpar,))
gls_sol = gs.y.T
gls_resids = (data - gls_sol) / (gls_sol**gammas)

# Plot the Residuals versus model value and time
plt.figure(figsize=(12, 8))
plt.subplot(2, 2, 1)
plt.plot(ts, ols_resids, 'b*')
plt.title('OLS')
plt.xlabel('Time (Days)')
plt.ylabel('Residual')

plt.subplot(2, 2, 2)
plt.plot(ts, gls_resids, 'r*')
plt.title('GLS')
plt.xlabel('Time (Days)')

plt.subplot(2, 2, 3)
plt.plot(ols_sol, ols_resids, 'b*')
plt.xlabel('Model Value')
plt.ylabel('Residual')

plt.subplot(2, 2, 4)
plt.plot(gls_sol, gls_resids, 'r*')
plt.xlabel('Model Value')
plt.show()